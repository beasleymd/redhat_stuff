---
# Play 1: Request/obtain cert from Venafi TLS Protect Cloud (runs on the controller)
- name: Request TLS cert from VaaS
  hosts: localhost
  gather_facts: false
  collections:
    - venafi.machine_identity
  vars:
    vaas_api_url: "https://api.venafi.cloud"
    vaas_api_key: "{{ venafi_api_key }}"  # or use an env var/credential
    zone: "MyApplication\\MyIssuingTemplate"   # EXACT names from VaaS (double backslash)
    common_name: "app.internal.example"        # your CN; add SANs as needed
    key_algo: "RSA"
    key_size: 2048
    work_dir: "/tmp/vaas_drop"                 # within the job/execution env

  tasks:
    - name: Ensure work dir exists
      ansible.builtin.file:
        path: "{{ work_dir }}"
        state: directory
        mode: "0750"

    - name: Request and pick up certificate from VaaS
      venafi.machine_identity.venafi_certificate:
        connection: cloud
        url: "{{ vaas_api_url }}"
        token: "{{ vaas_api_key }}"
        zone: "{{ zone }}"
        common_name: "{{ common_name }}"
        san_dns: ["{{ common_name }}"]   # add more if needed
        algorithm: "{{ key_algo }}"
        key_size: "{{ key_size }}"
        chain_option: "RootFirst"
        pickup: true               # wait for issuance
        timeout: 300
        state: present
        privatekey_path:   "{{ work_dir }}/{{ common_name }}.key"
        certificate_path:  "{{ work_dir }}/{{ common_name }}.crt"
        chain_path:        "{{ work_dir }}/{{ common_name }}-chain.crt"
      register: vaas_result

    - name: Show response (for troubleshooting)
      ansible.builtin.debug:
        var: vaas_result

# Play 2: Place certs directly on RHEL9 VMs (no Cockpit)
- name: Deploy certs onto RHEL9 AWS instances
  hosts: aws_ec2                 # your inventory group with the two EC2 hosts
  become: true
  gather_facts: false
  vars:
    common_name: "app.internal.example"
    src_dir: "/tmp/vaas_drop"
    cert_dest:  "/etc/pki/tls/certs/{{ common_name }}.crt"
    key_dest:   "/etc/pki/tls/private/{{ common_name }}.key"
    chain_dest: "/etc/pki/ca-trust/source/anchors/{{ common_name }}-chain.crt"

  tasks:
    - name: Ensure destination dirs exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "/etc/pki/tls/certs"
        - "/etc/pki/tls/private"
        - "/etc/pki/ca-trust/source/anchors"

    - name: Copy private key (0600)
      ansible.builtin.copy:
        src:  "{{ src_dir }}/{{ common_name }}.key"
        dest: "{{ key_dest }}"
        owner: root
        group: root
        mode: "0600"

    - name: Copy certificate (0644)
      ansible.builtin.copy:
        src:  "{{ src_dir }}/{{ common_name }}.crt"
        dest: "{{ cert_dest }}"
        owner: root
        group: root
        mode: "0644"

    - name: Copy chain to trust anchors (0644)
      ansible.builtin.copy:
        src:  "{{ src_dir }}/{{ common_name }}-chain.crt"
        dest: "{{ chain_dest }}"
        owner: root
        group: root
        mode: "0644"

    - name: Restore SELinux contexts (RHEL-friendly)
      ansible.builtin.command: "restorecon -Rv /etc/pki"
      changed_when: true

    - name: Update system trust store
      ansible.builtin.command: "update-ca-trust"
      changed_when: true

    # Optional: create a combined PEM some apps want (cert + chain)
    - name: Build combined PEM for apps that require it
      ansible.builtin.shell: |
        cat "{{ cert_dest }}" "{{ chain_dest }}" > "/etc/pki/tls/certs/{{ common_name }}-fullchain.pem"
      args:
        executable: /bin/bash
      changed_when: true

    # Sanity checks on the host
    - name: Check cert subject/issuer/dates
      ansible.builtin.command: "openssl x509 -in {{ cert_dest }} -noout -subject -issuer -dates"
      register: x509_info
      changed_when: false

    - name: Show cert info
      ansible.builtin.debug:
        var: x509_info.stdout

    - name: Verify chain against system CA bundle
      ansible.builtin.command: "openssl verify -CAfile /etc/pki/tls/certs/ca-bundle.crt {{ cert_dest }}"
      register: verify_out
      changed_when: false

    - name: Show verify result
      ansible.builtin.debug:
        var: verify_out.stdout
